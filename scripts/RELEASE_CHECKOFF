PART 0: BEFORE RELEASE

(1) Notify Tim Douglas that a release is planned and ask him to do an OSX
  binary build.

PART I: PREPARE FOR RELEASE

* INSTALL is up-to-date
* BUGS is up-to-date (use whatever is currently in the SourceForge bugs list)
* ChangeLog is up-to-date (if you use emacs, C-x v a)
* NEWS is up-to-date with differences since last version (note which
  differences work with saved games and which require a restart). This should
  be a summary of user-visible changes like features added and major bugs
  fixed.
* AUTHORS is up-to-date with _ALL_ contributions (legal reasons)
* Version number is correct in configure.ac
* The SUBDIRS of Makefile.am and worlds/Makefile.am are correct for this 
  release
* USERS_GUIDE is up-to-date

PART II: BUILD AND TEST SOURCE DIST

(1) Check that scripts/ghul-test-install will cd to the correct haxima-1.00x
    dir for this release
(2) Do a test build from the nazghul top-level directory:

        $ ./scripts/ghul-test-install <version>

  If all goes well the game should startup. The tarballs will all be built and
  sitting in the top-level directory.

(3) Make any changes necessary, and go back to PART II step (1)
(4) At this point checkin any changes made so far.

PART III: BUILD AND TEST WINDOWS BINARY

Note: This section is obsolete; Roberto Amorim now maintains the windows binary
      distribution. This section explains how to do a release using Cygwin and
      the Nullsoft installer, and I'm leaving it in for future reference.

Note: this assumes Cygwin

(1) ftp nazghul-x.y.z.tar.gz to a cygwin session
(2) untar, configure and build the nazghul.exe:

        $ tar -xvzf nazghul-x.y.z.tar.gz
        $ cd nazghul-x.y.z
        # this next step is because of where I have installed SDL_image on my
        environment... may not be necessary for other people:
        $ export LDFLAGS=-L/usr/local/lib
        $ ./configure
        $ make

(3) Make a new release dir:

        $ RELEASE=~/release/nazghul-x.y.z
        $ mkdir -p $RELEASE
        $ cp src/nazghul.exe $RELEASE
        $ cp doc/USERS_GUIDE $RELEASE/USERS_GUIDE.TXT
        $ cp -R worlds/haxima-1.002/* $RELEASE
        $ cd ..
        $ cp ../common/* $RELEASE
        $ cd $RELEASE
        $ unix2dos USERS_GUIDE.TXT

(4) Compile the nazghul.nsi script using Nullsoft
  a) check the revision number in the script first

(4) Test the release dir under windows by double-clicking on nazghul.exe in an
    explorer window.

(5) Convert README and USERS_GUIDE to be .TXT with DOS end-lines

(6) If all is well then zip up the release:

        $ cd ..
        $ tar -cvzf nazghul-x.y.z-win32.tar.zip nazghul-x.y.z/

(7) ftp it to another windows box without cygwin and test it out

PART IV: LABEL THE SOURCE

(1) Once everything has been tested and you know that you have what you want,
    label the source code with the release. On linux cd to the nazghul top dir
    under CVS and...

    $ cvs -q tag release_x_y_z

    See Appendix B for post-release maintenance.


PART V: UPLOAD TO SOURCEFORGE

(1) upload the distro tarballs to the sourceforge site:

        $ ncftp -u anonymous upload.sourceforge.net
        > bin
        > cd /incoming
        > put nazghul-x.y.z.tar.gz
        > put nazghul-x.y.z-win32.tar.gz
        > bye  

(2) On sourceforge at http://sourceforge.net/projects/nazghul/ goto the
    admin->File Releases page and scroll to the bottom. Click "Add Release"
    next to "nazghul-devel" (or "nazghul" for stable releases).

    (Or go directly to this URL:
    https://sourceforge.net/project/admin/editpackages.php?group_id=82028)

    (a) Fill out the form:
        ...For "New release name" put something like "nazghul-x.y.z"
        ...For "Of which package" use "nazghul" (nazghul-devel is obsolescent)
        ...Click on "Create this release"

    (b) Fill out the "Step 1:   Edit Existing Release" form:
        ...For "Upload Release Notes" browse to the file NEWS
        ...For "Upload Change Log" do nothing (our ChangeLog is too big and
           will be rejected)
        ...Press "Submit/Refresh"

    (c)  Fill out the "Step 2:   Add Files To This Release" form and hit
         Submit/Refresh

    (d) Fill out the "Step 3:   Edit Files In This Release" form
        ...Processor=Platform-Independent
        ...File Type Update=Source.gz
        ...hit Update/Refresh

PART VI: PUBLICIZE

Use the ANNOUNCE template in this directory to create the release announcement.

(1) From the main Nazghul project page on SourceForge submit a news item for
    the file release. (https://sourceforge.net/news/admin/?group_id=82028)

(2) Go to the freshmeat account and announce there, too

    freshmeat: http://www.freshmeat.net
        uname: gmcnutt

(3) Send an announcement to the nazghul-devel and nazghul-user lists. The
    distro maintainers monitor nazghul-devel. You might email them individually
    to check if they are still committed to managing their releases.

(4) On the nazghul home page add a news item

(5) On the haxima.com homepage add a news item (or ask Sam to do this)



APPENDIX A: Instructions for Release Maintainers

(1) ftp to upload.sourceforge.net and login as "anonymous" (I don't believe a
    password is required, or you can just use your email address) and put your
    file in the /incoming directory. Make sure to use binary mode.

(2) Login to sourceforge via your browser

(3) Go to https://sourceforge.net/project/admin/editpackages.php?group_id=82028

(4) Scroll to the bottom and click on "Edit Releases" for the "nazghul"
    package

(5) On the next page click on "Edit This Release" next to nazghul-0.5.5

(6) On the next page scroll down to "Step 2: Add Files to This Release"

(7) Your file should be on the list, so click next to it's box

(8) Click on "Add Files and/or Refresh View"

(9) Scroll down to "Step 3: Edit Files In This Release". Your file should be
    listed there. Select the "Processor" and "File Type" from the drop-down
    boxes and click "Update/Refresh".



APPENDIX B: Post-Release Maintenance

Post-release bugfixes should be done on a branch rooted at the release
label. To make the branch, check out the repository and do this:

   $ cvs update -r release_0_4_0
   $ cvs -q tag -b release_0_4_0_maint
   $ cvs update -r release_0_4_0_maint

Fixes should be merged back to the main trunk. Check out the repository on the
main trunk and merge from the maintenance branch like this:

   $ cvs update -d -j release_0_4_0_maint

