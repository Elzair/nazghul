//
// Copyright-Only Dedication (based on United States law)
//
// The person or persons who have associated their work with this document (the
// "Dedicator") hereby dedicate the entire copyright in the work of authorship
// identified below (the "Work") to the public domain.
//
// Dedicator makes this dedication for the benefit of the public at large and
// to the detriment of Dedicator's heirs and successors. Dedicator intends this
// dedication to be an overt act of relinquishment in perpetuity of all present
// and future rights under copyright law, whether vested or contingent, in the
// Work. Dedicator understands that such relinquishment of all rights includes
// the relinquishment of all rights to enforce (by lawsuit or otherwise) those
// copyrights in the Work.
//
// Dedicator recognizes that, once placed in the public domain, the Work may be
// freely reproduced, distributed, transmitted, used, modified, built upon, or
// otherwise exploited by anyone for any purpose, commercial or non-commercial,
// and in any way, including by methods that have not yet been invented or
// conceived.
//
/* all_mechanisms.ghul
 *
 * Defines all mechanism types in the world, from various files:
 */
#ifndef all_mechanisms_ghul
#define all_mechanisms_ghul


// These are game-defined signals:
#define MECH_SIGNAL_UP     100
#define MECH_SIGNAL_DOWN   101
#define MECH_SIGNAL_CHANGE 102


// Define a new type of mechanism: a simple lever that could be used to send a
// signal to, say, open a door.
#define MAKE_LEVER_MECH(type_name, m_name, _invisible, s1_nm, s1_spr, s2_nm, s2_spr) \
MECH_TYPE type_name { \
  name m_name;        \
  defaults {          \
    pmask     PASS_ALL;   \
    invisible _invisible; \
  }                   \
  states {            \
    {                 \
      name   s1_nm;   \
      sprite s1_spr;  \
    }                 \
    {                 \
      name   s2_nm;   \
      sprite s2_spr;  \
    }                 \
  }                   \
  transitions {             \
    state      s1_nm;       \
    event      MECH_HANDLE; \
    next_state s2_nm;       \
    actions {               \
      send_signal MECH_SIGNAL_DOWN; \
    }                       \
    state      s2_nm;       \
    event      MECH_HANDLE; \
    next_state s1_nm;       \
    actions {               \
      send_signal MECH_SIGNAL_UP; \
    } \
  }   \
}

MAKE_LEVER_MECH(mech_L_lever, "lever", 0,
                "up",    s_left_lever_up,    
                "down",  s_left_lever_down);
MAKE_LEVER_MECH(mech_R_lever,  "lever", 0,
                "up",    s_right_lever_up,   
                "down",  s_right_lever_down);
MAKE_LEVER_MECH(mech_T_lever, "lever", 0,
                "left",  s_top_lever_left,   
                "right", s_top_lever_right);
MAKE_LEVER_MECH(mech_B_lever, "lever", 0,
                "left",  s_bottom_lever_left,
                "right", s_bottom_lever_right);
MAKE_LEVER_MECH(mech_C_lever, "lever", 0,
                "left",  s_floor_lever_left, 
                "right", s_floor_lever_right);
MAKE_LEVER_MECH(mech_hidden_lever, "lever", 1,
                "up",    s_left_lever_up, 
                "down",  s_left_lever_down);


#define MAKE_SIMPLE_STEP_TRIGGER(type_name, _name, _state, _sprite, _sig, _invisible) \
MECH_TYPE type_name { \
  name _name;         \
  defaults {          \
    sprite _sprite;   \
    pmask  PASS_ALL;  \
    invisible _invisible; \
  }        \
  states { \
    {      \
       name   _state; \
    } \
  }   \
  transitions {           \
    state      _state;    \
    event      MECH_STEP; \
    next_state _state;    \
    actions {             \
      send_signal _sig;   \
    } \
  }   \
}

MAKE_SIMPLE_STEP_TRIGGER(mech_pressure_plate,    "pressure plate", "simple",
                         s_floor_plate,          MECH_SIGNAL_CHANGE, 0);
MAKE_SIMPLE_STEP_TRIGGER(invisible_step_trigger, "trigger", "invisible",
                         null,                   MECH_SIGNAL_DOWN, 1);

MECH_TYPE mech_portcullis {
  name "portcullis";
  defaults {}

  states {
    {
      name   "raised";
      sprite s_portcullis_up;
      pmask  PASS_ALL;
    }
    {
      name   "lowered";
      sprite s_portcullis_down;
      pmask  SOLID;
    }
  }

  transitions {
    state      "raised";
    event      MECH_SIGNAL_DOWN;
    next_state "lowered";
    actions {
      send_signal MECH_SIGNAL_DOWN;
    }
    
    state      "raised";
    event      MECH_SIGNAL_CHANGE;
    next_state "lowered";
    actions {
      send_signal MECH_SIGNAL_DOWN;
    }
    
    state      "lowered";
    event      MECH_SIGNAL_UP;
    next_state "raised";
    actions {
      send_signal MECH_SIGNAL_UP;
    }
    
    state      "lowered";
    event      MECH_SIGNAL_CHANGE;
    next_state "raised";
    actions {
      send_signal MECH_SIGNAL_UP;
    }
  } // transitions

} // MECH_TYPE mech_portcullis


MECH_TYPE mech_light {
  name "light source";
  defaults {
    sprite null;
    pmask  PASS_ALL;
  }
  states {
    {
      name "lit";
      light 1024;
    }
    {
      name "unlit";
      light 0;
    }
  }
  transitions {
    
    state      "lit";
    event      MECH_SIGNAL_DOWN;
    next_state "unlit";
    actions {
      send_signal MECH_SIGNAL_DOWN;
    }
    
    state      "unlit";
    event      MECH_SIGNAL_UP;
    next_state "lit";
    actions {
      send_signal MECH_SIGNAL_UP;
    }
  }
} // MECH_TYPE mech_light


#define MAKE_DOORLIKE_MECH(type_name, m_name, self_close_time,             \
                           s_CLOSED_nm,  s_CLOSED_spr,  s_CLOSED_opaque,   \
                           s_OPEN_nm,    s_OPEN_spr,    s_OPEN_opaque,     \
                           s_LOCKED_nm,  s_LOCKED_spr,  s_LOCKED_opaque,   \
                           s_MAGLOCK_nm, s_MAGLOCK_spr, s_MAGLOCK_opaque ) \
MECH_TYPE type_name { \
  name m_name; \
  defaults {}  \
  states {     \
    {          \
      name   s_CLOSED_nm;     \
      sprite s_CLOSED_spr;    \
      pmask  SOLID;           \
      opaque s_CLOSED_opaque; \
    } \
    { \
      name   s_OPEN_nm;     \
      sprite s_OPEN_spr;    \
      pmask  PASS_ALL;      \
      opaque s_OPEN_opaque; \
    } \
    { \
      name   s_LOCKED_nm;     \
      sprite s_LOCKED_spr;    \
      pmask  SOLID;           \
      opaque s_LOCKED_opaque; \
    } \
    { \
      name   s_MAGLOCK_nm;     \
      sprite s_MAGLOCK_spr;    \
      pmask  SOLID;            \
      opaque s_MAGLOCK_opaque; \
    } \
  }   \
  transitions {              \
    state      s_CLOSED_nm;  \
    event      MECH_OPEN;    \
    next_state s_OPEN_nm;    \
    actions {                \
      send_signal MECH_OPEN; \
      set_alarm   self_close_time MECH_CLOSE; \
    } \
      \
    state      s_OPEN_nm;     \
    event      MECH_CLOSE;    \
    next_state s_CLOSED_nm;   \
    actions {                 \
      send_signal MECH_CLOSE; \
    } \
      \
    state      s_CLOSED_nm;  \
    event      MECH_LOCK;    \
    next_state s_LOCKED_nm;  \
    actions {                \
      send_signal MECH_LOCK; \
    } \
      \
    state      s_LOCKED_nm;    \
    event      MECH_UNLOCK;    \
    next_state s_CLOSED_nm;    \
    actions {                  \
      send_signal MECH_UNLOCK; \
    } \
      \
    state      s_CLOSED_nm;        \
    event      MECH_MAGIC_LOCK;    \
    next_state s_MAGLOCK_nm;       \
    actions {                      \
      send_signal MECH_MAGIC_LOCK; \
    } \
      \
    state      s_MAGLOCK_nm;         \
    event      MECH_MAGIC_UNLOCK;    \
    next_state s_CLOSED_nm;          \
    actions {                        \
      send_signal MECH_MAGIC_UNLOCK; \
    } \
  }   \
} /* MAKE_DOORLIKE_MECH() */

MAKE_DOORLIKE_MECH(mech_vdoor, "door", 8,
                   "closed",           s_door,        1,
                   "open",             null,          0,
                   "locked",           s_door_locked, 1,
                   "magically locked", s_door_locked, 1);

MAKE_DOORLIKE_MECH(mech_hdoor, "door", 8,
                   "closed",           s_hdoor,        1,
                   "open",             null,           0,
                   "locked",           s_hdoor_locked, 1,
                   "magically locked", s_hdoor_locked, 1);

MAKE_DOORLIKE_MECH(mech_h_fence_gate, "gate", 8,
                   "closed",           s_hdoor,        0,
                   "open",             null,           0,
                   "locked",           s_hdoor_locked, 0,
                   "magically locked", s_hdoor_locked, 0);




//
// Water trap
//

MAP m_WATER_TRAP_OPEN {
  type    ascii;
  width   5;
  height  5;
  palette pal_standard;
  terrain {
    "_ _ _ _ _";
    "_ _ _ _ _";
    "_ _ _ _ _";
    "_ _ _ _ _";
    "_ _ _ _ _";
  }
} // m_WATER_TRAP_OPEN

MAP m_WATER_TRAP_CLOSED {
  type   ascii;
  width  5;
  height 5;
  palette pal_standard;
  terrain {
    "e e e e e";
    "e e e e e";
    "e e e e e";
    "e e e e e";
    "e e e e e";
  }
} // m_WATER_TRAP_CLOSED

#define MAKE_BLIT_MECH(_name, plc, x, y, map1, map2, w, h, open_msg, close_msg) \
MECH_TYPE _name { \
  name "lever"; \
  defaults { \
    pmask PASS_ALL; \
  } \
  states { \
    { \
      name "up"; \
      sprite s_floor_lever_left; \
    } \
    {  \
      name "down"; \
      sprite s_floor_lever_right; \
    } \
  } \
  transitions { \
 \
    state "up"; \
    event MECH_HANDLE; \
    next_state "down"; \
    actions { \
      print open_msg; \
      blit_map plc x y map1 0 0 w h 0; \
    } \
 \
    state "down"; \
    event MECH_HANDLE; \
    next_state "up"; \
    actions { \
      print close_msg; \
      blit_map plc x y map2 0 0 w h 0; \
    } \
 \
  } \
}

#define MAKE_WATER_TRAP(mech_name, plc, x, y, w, h) \
    MAKE_BLIT_MECH(mech_name, plc, x, y, \
                   m_WATER_TRAP_OPEN, m_WATER_TRAP_CLOSED, w, h, \
                   "A trap door opens, revealing a watery pit!", \
                   "A trap door closes.")

#define MAKE_DRAWBRIDGE(mech_name, plc, x, y) \
    MAKE_BLIT_MECH(mech_name, plc, x, y, \
                   m_WATER_TRAP_OPEN, m_WATER_TRAP_CLOSED, 2, 1, \
                   "The drawbridge raises.", \
                   "The drawbridge lowers.")

MAKE_WATER_TRAP(mech_water_trap_L_lever, p_prison_chamber, 3, 3, 2, 1);


//MAKE_BLIT_MECH(mech_water_trap_L_lever, p_prison_chamber, 3, 3, m_WATER_TRAP_OPEN, m_WATER_TRAP_CLOSED, 2, 1, "A trap door opens, revealing a watery pit!", "A trap door closes.");


#endif // all_mechanisms_ghul

/* eof */
