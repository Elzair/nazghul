//
// Copyright-Only Dedication (based on United States law)
//
// The person or persons who have associated their work with this document (the
// "Dedicator") hereby dedicate the entire copyright in the work of authorship
// identified below (the "Work") to the public domain.
//
// Dedicator makes this dedication for the benefit of the public at large and
// to the detriment of Dedicator's heirs and successors. Dedicator intends this
// dedication to be an overt act of relinquishment in perpetuity of all present
// and future rights under copyright law, whether vested or contingent, in the
// Work. Dedicator understands that such relinquishment of all rights includes
// the relinquishment of all rights to enforce (by lawsuit or otherwise) those
// copyrights in the Work.
//
// Dedicator recognizes that, once placed in the public domain, the Work may be
// freely reproduced, distributed, transmitted, used, modified, built upon, or
// otherwise exploited by anyone for any purpose, commercial or non-commercial,
// and in any way, including by methods that have not yet been invented or
// conceived.
//
/* def_constants.ghul
 *
 * Contains constants defined and used in GhulScript files.
 * Constants shared with the C engine core are in "dup_constants.h".
 */
#ifndef def_constants_ghul
#define def_constants_ghul


/*
 * Some common defines:
 */
#define TRUE  1
#define FALSE 0

/*
 * TODO: instead of being hardcoded, this one should be specified within the
 * script and used by the engine.
 */
#define TURNS_PER_HOUR 3600

/*
 *  Facings. These need to correspond with the direction macros in common.h,
 *  but these are bit masks, whereas those in common.h can be read as bit 
 *  numbers.
 */
#define FAC_NW    1
#define FAC_N     2
#define FAC_NE    4

#define FAC_W     8
#define FAC_H     16
#define FAC_E     32

#define FAC_SW    64
#define FAC_S     128
#define FAC_SE    256

#define FAC_EW    40
#define FAC_NSEW  170


/*
 * Targeting Modes (must match similar macros in common.h)
 * SAM: TODO: Move this to dup_constants.h ?
 */
#define TARG_NONE       0
#define TARG_SELF       1
#define TARG_FRIEND     2


/*
 * Armament slot masks
 */
#define NO_SLOT                 0
#define AMULET_SLOT             1
#define RING_SLOT               2
#define GAZER_HELM              4
#define WEAPON_SLOT             8
#define SHIELD_SLOT             8
#define WEAPON_OR_SHIELD_SLOT   8
#define ARMOUR_SLOT             16
#define BOOT_SLOT               32
#define HELM_SLOT               64


/*
 * Morphologies (in terms of Armament slot masks)
 */
#define HUMANOID_MORPHOLOGY        \
    n_slots 8 {                    \
        mask HELM_SLOT             \
        mask AMULET_SLOT           \
        mask WEAPON_OR_SHIELD_SLOT \
        mask WEAPON_OR_SHIELD_SLOT \
        mask ARMOUR_SLOT           \
        mask BOOT_SLOT             \
        mask RING_SLOT             \
        mask RING_SLOT             \
    } 


/*
 * Services (must match the macros in common.h)
 */
#define SRV_HEAL      1
#define SRV_CURE      2
#define SRV_RESURRECT 3


/*
 * Layers (must match the layer enumeration in object.h)
 * SAM: 2003/05/06 Note that they are already a little out
 *                 of sync, though the ORDERING still matches, 
 *                 which is required.
 */
#define LAYER_MECHANISM  1
#define LAYER_PORTAL     2
#define LAYER_VEHICLE    3
#define LAYER_BED        4
#define LAYER_CONTAINER  5
#define LAYER_ITEM       6
#define LAYER_FIELD      7
#define LAYER_BEING      8
#define LAYER_PROJECTILE 9
#define LAYER_CURSOR     10


/* 
 * Passability masks (pmasks)
 */
#define PASS_NONE 0
#define SOLID     1
#define LAND      2
#define WATER     4
#define SHOALS    8
#define BRIDGE    14  // (LAND | WATER | SHOALS)
// SAM: Bridge terrains were using pmask 3 (SOLID | LAND), which didn't seem right...
#define PASS_ALL  255

// SAM: Moved the terrain palette definitions to data/types/terrains.ghul



/*****************************************************************************
 ***   SCHEDULES   ***
 *****************************************************************************/
#define NONE      0  /* reserved */
#define WORKING   1  /* reserved */
#define SLEEPING  2  /* reserved */
#define COMMUTING 3  /* reserved */
#define EATING    4  /* reserved */
#define RELAXING  5
#define IDLE      6

/*****************************************************************************
 * Movement Speeds / Passability Costs
 *
 * The idea is NOT to list the speeds for every species and vehicle here, as I
 * currently am. The idea is to list classes of speeds. But it may take some
 * time to figure out what the right balance is and to identify the classes of
 * speeds that seem to fit naturally. Until we figure that balance out I'll
 * explicitly list all the individual speeds until the pattern starts to
 * emerge.
 *
 * Speed equates exactly to action points per turn.
 * 
 * Passability cost equates exactly to action points consumed when the terrain
 * is crossed. Ships are a bit special because different costs apply due to
 * wind penalties (e.g., ACT_PTS_HEADWIND_DIVISOR).
 *
 * 1. A man crossing grass should consume one turn.
 *
 * 2. A man walking on a road should consume half a turn (this encourages the
 *    pathfinding algorithm to make townspeople use the roads in town, which
 *    looks good).
 *
 * 3. A ship moving against the wind is slower than a man walking, and should
 *    take at least two turns. A ship tacking across the wind is faster than a
 *    horse running, and may move several times in one turn.
 *
 *****************************************************************************/
#define SPD_INSECTS   1
#define SPD_SLIME     1
#define SPD_SNAKE     1
#define SPD_GAZER     2
#define SPD_GOBLIN    2
#define SPD_HUMAN     2
#define SPD_NIXIE     2
#define SPD_SKELETON  2
#define SPD_GHAST     2
#define SPD_WTR_ELEM  2
#define SPD_HORSE     3

#define SPD_SHIP      4

#define PASS_VERY_SLOW   4 /* thickets */
#define PASS_SLOW        3 /* hills, brushy */
#define PASS_MEDIUM      2 /* grass */
#define PASS_FAST        1 /* roads */

#define ACT_PTS_FIRE_CANNON       2
#define ACT_PTS_CROSSWIND_DIVISOR 1
#define ACT_PTS_TAILWIND_DIVISOR  2
#define ACT_PTS_HEADWIND_DIVISOR  4 

#endif // def_constants_ghul
/* eof */
