//
// Copyright-Only Dedication (based on United States law)
//
// The person or persons who have associated their work with this document (the
// "Dedicator") hereby dedicate the entire copyright in the work of authorship
// identified below (the "Work") to the public domain.
//
// Dedicator makes this dedication for the benefit of the public at large and
// to the detriment of Dedicator's heirs and successors. Dedicator intends this
// dedication to be an overt act of relinquishment in perpetuity of all present
// and future rights under copyright law, whether vested or contingent, in the
// Work. Dedicator understands that such relinquishment of all rights includes
// the relinquishment of all rights to enforce (by lawsuit or otherwise) those
// copyrights in the Work.
//
// Dedicator recognizes that, once placed in the public domain, the Work may be
// freely reproduced, distributed, transmitted, used, modified, built upon, or
// otherwise exploited by anyone for any purpose, commercial or non-commercial,
// and in any way, including by methods that have not yet been invented or
// conceived.
//
/* terrains.ghul
 *
 * Defines terrain objects which are used to form maps.
 */
#ifndef terrains_ghul
#define terrains_ghul

#include "../def_constants.ghul"

#define TERRAIN(_tag,_name,_pmask,_sprite,_id,_alpha,_mc,_effects,_light) \
    _tag { \
        name          _name    \
        pmask         _pmask   \
        sprite        _sprite  \
        id            _id      \
        alpha         _alpha   \
        movement_cost _mc      \
        effects       _effects \
        light         _light   \
    }


// Defines for transparency / opacity and such:
// SAM: The older names TRANSPARENT and OPAQUE proved to be too long.
//      It turns out to be more practical to use '0' for opaque terrain,
//      and SEE (you can 'see' through it) for non-opaque terrain.
#define SEE 1
// #define NOC 0


terrains  {
  // The TERRAIN() macro (from def_macros.ghul) takes these arguments:
  // tag, "name", pmask, sprite, id, alpha, move_cost, effects, light

  // Outdoor terrains
  TERRAIN(t_deep,      "deep water",    WATER,  s_deep,       0, SEE, 1, 0, 0);
  TERRAIN(t_shallow,   "shallow water", WATER,  s_shallow,    1, SEE, 1, 0, 0);
  TERRAIN(t_shoals,    "shoals",        SHOALS, s_shoals,     2, SEE, 1, 0, 0);
  TERRAIN(t_grass,     "grass",         LAND,   s_grass,      4, SEE, 1, 0, 0);
  TERRAIN(t_trees,     "trees",         LAND,   s_trees,      5, SEE, 1, 0, 0);
  TERRAIN(t_forest,    "forest",        LAND,   s_forest,     6, 0,   2, 0, 0);
  TERRAIN(t_hills,     "hills",         LAND,   s_hills,      7, SEE, 2, 0, 0);
  TERRAIN(t_mountains, "mountains",     SOLID,  s_mountains,  8, 0,   2, 0, 0);

  // Special outdoor structures:
  TERRAIN(t_leftwing,  "castle wall",   SOLID,  s_leftwing,  13, SEE, 1, 0, 0);
  TERRAIN(t_rightwing, "castle wall",   SOLID,  s_rightwing, 15, SEE, 1, 0, 0);

  TERRAIN(t_cobblestone, "cobblestone", LAND,  s_cobblestone, 22, SEE, 1, 0, 0);
  TERRAIN(t_flagstones,  "flagstones",  LAND,  s_flagstone,   62, SEE, 1, 0, 0);

  // Effect-bearing terrains:
  TERRAIN(t_bog,          "bog",       LAND, s_bog,         3, SEE, 2, EFFECT_POISON,  0);
  TERRAIN(t_fire_terrain, "fire",      LAND, s_field_fire, 70, SEE, 1, EFFECT_BURN,  512);
  TERRAIN(t_fireplace,    "fireplace", LAND, s_fireplace,  75, SEE, 1, EFFECT_BURN, 4096);
  TERRAIN(t_lava,         "lava",      LAND, s_lava,       76, SEE, 1, EFFECT_BURN,  128);

  // Bridge Terrains:
  TERRAIN(t_bridge,        "bridge", BRIDGE, s_bridge,        23, SEE, 1, 0, 0);
  TERRAIN(t_bridge_top,    "bridge", BRIDGE, s_bridge_top,    25, SEE, 1, 0, 0);
  TERRAIN(t_bridge_bottom, "bridge", BRIDGE, s_bridge_bottom, 26, SEE, 1, 0, 0);

  // Terrain used to build Ships (for combat maps, etc.)
  // SAM: Note that there is a problem with using the corner pieces,
  //      when a map gets rotated, such "oriented" terrains need to be
  //      rotated also, or you get funky spiky effects.
  TERRAIN(t_ship_hull,   "ship's hull",  SOLID, s_wall,        72, SEE, 0, 0, 0);
  TERRAIN(t_sh_hull_NE,  "ship's hull",  SOLID, s_wall_b,      49, SEE, 1, 0, 0);
  TERRAIN(t_sh_hull_NW,  "ship's hull",  SOLID, s_wall_a,      50, SEE, 1, 0, 0);
  TERRAIN(t_sh_hull_SE,  "ship's hull",  SOLID, s_wall_c,      51, SEE, 1, 0, 0);
  TERRAIN(t_sh_hull_SW,  "ship's hull",  SOLID, s_wall_d,      52, SEE, 1, 0, 0);
  TERRAIN(t_mast,        "mast",         SOLID, s_mast,        53, SEE, 1, 0, 0);
  TERRAIN(t_ships_wheel, "ship's wheel", SOLID, s_ships_wheel, 54, SEE, 1, 0, 0);
  TERRAIN(t_deck,        "deck",         LAND,  s_deck,        63, SEE, 1, 0, 0);

  // Wall type terrains
  TERRAIN(t_wall_rock,   "rock wall",   SOLID, s_wall_rock,   57, 0, 1, 0, 0);
  TERRAIN(t_wall,        "wall",        SOLID, s_wall_stone, 127, 0, 1, 0, 0);
  TERRAIN(t_secret_door, "secret door", LAND,  s_secret_door, 73, 0, 1, 0, 0);
  TERRAIN(t_sea_wall,    "sea wall",    SOLID, s_wall,        72, 0, 0, 0, 0);
  TERRAIN(t_sea_wall_NE, "sea wall",    SOLID, s_wall_b,      49, 0, 1, 0, 0);
  TERRAIN(t_sea_wall_NW, "sea wall",    SOLID, s_wall_a,      50, 0, 1, 0, 0);
  TERRAIN(t_sea_wall_SE, "sea wall",    SOLID, s_wall_c,      51, 0, 1, 0, 0);
  TERRAIN(t_sea_wall_SW, "sea wall",    SOLID, s_wall_d,      52, 0, 1, 0, 0);

  // Obstacles, furniture, features:
  TERRAIN(t_boulder,     "boulder", SOLID,     s_boulder,      55, SEE, 1, 0, 0);
  TERRAIN(t_ankh,        "ankh",    PASS_NONE, s_ankh,         61, SEE, 1, 0, 0);
  TERRAIN(t_altar,       "altar",   PASS_NONE, s_altar,        74, SEE, 1, 0, 0);
  TERRAIN(t_pillar,      "pillar",  SOLID,     s_pillar,       48, SEE, 1, 0, 0);

  // Blank shop counter sections
  TERRAIN(t_counter_middle, "counter", SOLID, s_counter_middle, 122, SEE, 0, 0, 0);
  TERRAIN(t_counter_right,  "counter", SOLID, s_counter_right,  123, SEE, 0, 0, 0);
  TERRAIN(t_counter_left,   "counter", SOLID, s_counter_left,   124, SEE, 0, 0, 0);
  TERRAIN(t_counter_1x1,    "counter", SOLID, s_counter_1x1,    125, SEE, 0, 0, 0);
  
  // English Alphabet Sign Terrains 
  // (Each tile is a sign bearing a single letter.)
  TERRAIN(t_A, "an A", SOLID, s_A,  96, SEE, 0, 0, 0);
  TERRAIN(t_B,  "a B", SOLID, s_B,  97, SEE, 0, 0, 0);
  TERRAIN(t_C,  "a C", SOLID, s_C,  98, SEE, 0, 0, 0);
  TERRAIN(t_D,  "a D", SOLID, s_D,  99, SEE, 0, 0, 0);
  TERRAIN(t_E, "an E", SOLID, s_E, 100, SEE, 0, 0, 0);
  TERRAIN(t_F, "an F", SOLID, s_F, 101, SEE, 0, 0, 0);
  TERRAIN(t_G,  "a G", SOLID, s_G, 102, SEE, 0, 0, 0);
  TERRAIN(t_H, "an H", SOLID, s_H, 103, SEE, 0, 0, 0);
  TERRAIN(t_I, "an I", SOLID, s_I, 104, SEE, 0, 0, 0);
  TERRAIN(t_J,  "a J", SOLID, s_J, 105, SEE, 0, 0, 0);
  TERRAIN(t_K,  "a K", SOLID, s_K, 106, SEE, 0, 0, 0);
  TERRAIN(t_L, "an L", SOLID, s_L, 107, SEE, 0, 0, 0);
  TERRAIN(t_M, "an M", SOLID, s_M, 108, SEE, 0, 0, 0);
  TERRAIN(t_N, "an N", SOLID, s_N, 109, SEE, 0, 0, 0);
  TERRAIN(t_O, "an O", SOLID, s_O, 110, SEE, 0, 0, 0);
  TERRAIN(t_P,  "a P", SOLID, s_P, 111, SEE, 0, 0, 0);
  TERRAIN(t_Q,  "a Q", SOLID, s_Q, 112, SEE, 0, 0, 0);
  TERRAIN(t_R, "an R", SOLID, s_R, 113, SEE, 0, 0, 0);
  TERRAIN(t_S, "an S", SOLID, s_S, 114, SEE, 0, 0, 0);
  TERRAIN(t_T,  "a T", SOLID, s_T, 115, SEE, 0, 0, 0);
  TERRAIN(t_U,  "a U", SOLID, s_U, 116, SEE, 0, 0, 0);
  TERRAIN(t_V,  "a V", SOLID, s_V, 117, SEE, 0, 0, 0);
  TERRAIN(t_W,  "a W", SOLID, s_W, 118, SEE, 0, 0, 0);
  TERRAIN(t_X, "an X", SOLID, s_X, 119, SEE, 0, 0, 0);
  TERRAIN(t_Y,  "a Y", SOLID, s_Y, 120, SEE, 0, 0, 0);
  TERRAIN(t_Z,  "a Z", SOLID, s_Z, 121, SEE, 0, 0, 0);

  TERRAIN(t_rune_A,   "a rune", SOLID, s_rune_A,      131, SEE, 0, 0, 0);
  TERRAIN(t_rune_B,   "a rune", SOLID, s_rune_B,      132, SEE, 0, 0, 0);
  TERRAIN(t_rune_C,   "a rune", SOLID, s_rune_C,      133, SEE, 0, 0, 0);
  TERRAIN(t_rune_D,   "a rune", SOLID, s_rune_D,      134, SEE, 0, 0, 0);
  TERRAIN(t_rune_E,   "a rune", SOLID, s_rune_E,      135, SEE, 0, 0, 0);
  TERRAIN(t_rune_F,   "a rune", SOLID, s_rune_F,      136, SEE, 0, 0, 0);
  TERRAIN(t_rune_G,   "a rune", SOLID, s_rune_G,      137, SEE, 0, 0, 0);
  TERRAIN(t_rune_H,   "a rune", SOLID, s_rune_H,      138, SEE, 0, 0, 0);
  TERRAIN(t_rune_I,   "a rune", SOLID, s_rune_I,      139, SEE, 0, 0, 0);
  TERRAIN(t_rune_J,   "a rune", SOLID, s_rune_J,      140, SEE, 0, 0, 0);
  TERRAIN(t_rune_K,   "a rune", SOLID, s_rune_K,      141, SEE, 0, 0, 0);
  TERRAIN(t_rune_L,   "a rune", SOLID, s_rune_L,      142, SEE, 0, 0, 0);
  TERRAIN(t_rune_M,   "a rune", SOLID, s_rune_M,      143, SEE, 0, 0, 0);
  TERRAIN(t_rune_N,   "a rune", SOLID, s_rune_N,      144, SEE, 0, 0, 0);
  TERRAIN(t_rune_O,   "a rune", SOLID, s_rune_O,      145, SEE, 0, 0, 0);
  TERRAIN(t_rune_P,   "a rune", SOLID, s_rune_P,      146, SEE, 0, 0, 0);
  TERRAIN(t_rune_Q,   "a rune", SOLID, s_rune_Q,      147, SEE, 0, 0, 0);
  TERRAIN(t_rune_R,   "a rune", SOLID, s_rune_R,      148, SEE, 0, 0, 0);
  TERRAIN(t_rune_S,   "a rune", SOLID, s_rune_S,      149, SEE, 0, 0, 0);
  TERRAIN(t_rune_T,   "a rune", SOLID, s_rune_T,      150, SEE, 0, 0, 0);
  TERRAIN(t_rune_U,   "a rune", SOLID, s_rune_U,      151, SEE, 0, 0, 0);
  TERRAIN(t_rune_V,   "a rune", SOLID, s_rune_V,      152, SEE, 0, 0, 0);
  TERRAIN(t_rune_W,   "a rune", SOLID, s_rune_W,      153, SEE, 0, 0, 0);
  TERRAIN(t_rune_X,   "a rune", SOLID, s_rune_X,      154, SEE, 0, 0, 0);
  TERRAIN(t_rune_Y,   "a rune", SOLID, s_rune_Y,      155, SEE, 0, 0, 0);
  TERRAIN(t_rune_Z,   "a rune", SOLID, s_rune_Z,      156, SEE, 0, 0, 0);
  TERRAIN(t_rune_TH,  "a rune", SOLID, s_rune_TH,     157, SEE, 0, 0, 0);
  TERRAIN(t_rune_EE,  "a rune", SOLID, s_rune_EE,     158, SEE, 0, 0, 0);
  TERRAIN(t_rune_NG,  "a rune", SOLID, s_rune_NG,     159, SEE, 0, 0, 0);
  TERRAIN(t_rune_EA,  "a rune", SOLID, s_rune_EA,     160, SEE, 0, 0, 0);
  TERRAIN(t_rune_ST,  "a rune", SOLID, s_rune_ST,     161, SEE, 0, 0, 0);
  TERRAIN(t_rune_DOT, "a rune", SOLID, s_rune_DOTSEP, 162, SEE, 0, 0, 0);
        
} /* terrains */


/* Terrain palettes.  Currently we fake these with macros,
 * but in the near future plan to make palettes into GhulScript 
 * entities with a tagname, so that maps can simply refer to 
 * (one or more, for a union) palette(s).  
 * That should save memory and parse time.
 */
#define STD_TERRAIN_PALETTE \
palette {                   \
        '_'    t_deep;      \
        '-'    t_shallow;   \
        '~'    t_shoals;    \
        '%'    t_bog;       \
        '.'    t_grass;     \
        't'    t_trees;     \
        '|'    t_forest;    \
        '{'    t_hills;     \
        '^'    t_mountains; \
\
        ','    t_flagstones;    \
        'c'    t_cobblestone;   \
        'e'    t_deck;          \
        '='    t_bridge;        \
        'g'    t_bridge_top;    \
        'h'    t_bridge_bottom; \
\
        'f'    t_fire_terrain;  \
        '!'    t_lava;          \
        '&'    t_fireplace;     \
\
        'x'    t_wall;          \
        '?'    t_secret_door;   \
        'p'    t_pillar;        \
        'b'    t_boulder;       \
        'r'    t_wall_rock;     \
\
        'A'    t_A; \
        'B'    t_B; \
        'C'    t_C; \
        'D'    t_D; \
        'E'    t_E; \
        'F'    t_F; \
        'G'    t_G; \
        'H'    t_H; \
        'I'    t_I; \
        'J'    t_J; \
        'K'    t_K; \
        'L'    t_L; \
        'M'    t_M; \
        'N'    t_N; \
        'O'    t_O; \
        'P'    t_P; \
        'Q'    t_Q; \
        'R'    t_R; \
        'S'    t_S; \
        'T'    t_T; \
        'U'    t_U; \
        'V'    t_V; \
        'W'    t_W; \
        'X'    t_X; \
        'Y'    t_Y; \
        'Z'    t_Z; \
\
        'q'    t_rune_Q; \
\
        '@'    t_counter_middle; \
        '['    t_counter_left;   \
        ']'    t_counter_right;  \
        '0'    t_counter_1x1;    \
\
        '+'    t_ankh;          \
        'a'    t_altar;         \
        '<'    t_leftwing;      \
        '>'    t_rightwing;     \
} // palette STD_TERRAIN_PALETTE

#define STD_EXPANDED_PALETTE \
palette {                   \
        '__'    t_deep;      \
        '--'    t_shallow;   \
        '~~'    t_shoals;    \
        '%%'    t_bog;       \
        '..'    t_grass;     \
        'tt'    t_trees;     \
        '||'    t_forest;    \
        '{{'    t_hills;     \
        '^^'    t_mountains; \
\
        ',,'    t_flagstones;    \
        'cc'    t_cobblestone;   \
        'ee'    t_deck;          \
        '=='    t_bridge;        \
        'gg'    t_bridge_top;    \
        'hh'    t_bridge_bottom; \
\
        'f'    t_fire_terrain;  \
        '!'    t_lava;          \
        '&'    t_fireplace;     \
\
        'x'    t_wall;          \
        '?'    t_secret_door;   \
        'p'    t_pillar;        \
        'b'    t_boulder;       \
        'r'    t_wall_rock;     \
\
        '.A'    t_A; \
        '.B'    t_B; \
        '.C'    t_C; \
        '.D'    t_D; \
        '.E'    t_E; \
        '.F'    t_F; \
        '.G'    t_G; \
        '.H'    t_H; \
        '.I'    t_I; \
        '.J'    t_J; \
        '.K'    t_K; \
        '.L'    t_L; \
        '.M'    t_M; \
        '.N'    t_N; \
        '.O'    t_O; \
        '.P'    t_P; \
        '.Q'    t_Q; \
        '.R'    t_R; \
        '.S'    t_S; \
        '.T'    t_T; \
        '.U'    t_U; \
        '.V'    t_V; \
        '.W'    t_W; \
        '.X'    t_X; \
        '.Y'    t_Y; \
        '.Z'    t_Z; \
\
        ',A'  t_rune_A; \
        ',B'  t_rune_B; \
        ',C'  t_rune_C; \
        ',D'  t_rune_D; \
        ',E'  t_rune_E; \
        ',F'  t_rune_F; \
        ',G'  t_rune_G; \
        ',H'  t_rune_H; \
        ',I'  t_rune_I; \
        ',J'  t_rune_J; \
        ',K'  t_rune_K; \
        ',L'  t_rune_L; \
        ',M'  t_rune_M; \
        ',N'  t_rune_N; \
        ',O'  t_rune_O; \
        ',P'  t_rune_P; \
        ',Q'  t_rune_Q; \
        ',R'  t_rune_R; \
        ',S'  t_rune_S; \
        ',T'  t_rune_T; \
        ',U'  t_rune_U; \
        ',V'  t_rune_V; \
        ',W'  t_rune_W; \
        ',X'  t_rune_X; \
        ',Y'  t_rune_Y; \
        ',Z'  t_rune_Z; \
\
        ';T'  t_rune_TH;  \
        ';E'  t_rune_EE;  \
        ';N'  t_rune_NG;  \
        ';A'  t_rune_EA;  \
        ';S'  t_rune_ST;  \
        ';D'  t_rune_DOT; \
\
        '@'    t_counter_middle; \
        '['    t_counter_left;   \
        ']'    t_counter_right;  \
        '0'    t_counter_1x1;    \
\
        '+'    t_ankh;          \
        'a'    t_altar;         \
        '<'    t_leftwing;      \
        '>'    t_rightwing;     \
} // palette STD_EXPANDED_PALETTE


#endif // terrains_ghul

/* eof */
