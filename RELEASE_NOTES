Changes between nazghul-0.2.0 and nazghul-0.2.1

o Added terrain features.

Changes between nazghul-0.1.5 and nazghul-0.2.0

o Script language changed the original ad-hoc script language sometimes
  referred to as "ghulscript" to Scheme.

o Players can save the game.

Changes between nazghul-0.1.4 and nazghul-0.1.5

o Bugfix: with animation off, on entry to wilderness combat the map was not
  being updated properly. (Thanks to Sam for finding this).

o Bugfix: with animation off, in Character Mode, if the current character quits
  the game then in some cases the game will not quit, and will prompt the
  player to move the next character, until the turn is over.

o Bugfix: with animation off, after fleeing from wilderness combat the screen
  remained blank until the user pressed a key to cause a map repaint. (Thanks
  to Sam for finding this).

o Bugfix: with animation off, npc's sometimes appeared to "jump" a
  space. Needed to add conditional repaints of the map before prompting the
  user for input, this way the user is always looking at an up-to-date map when
  they decide what to do next.

Changes between nazghul-0.1.4 and nazghul0.1.3

o Towns now work like dungeons and combat, as opposed to working like the
  wilderness. This means that instead of seeing a single icon represent the
  party in town you will see each party member. Follow, Solo and Round-Robin
  modes all work as you would expect.

o Fixed the problems with compiling on recent versions of gcc.

o Minor tweeks to the main map.

Changes between nazghul-0.1.2 and nazghul-0.1.3

sglasby:

o [daghul]
  new spell "IN BET LOR", part of a set of new spells planned for the initial
  (example) game.

o [daghul]
  new armor types

o [engine]
  several UI changes pertaining to weapon prompts in combat mode.

o [engine]
  New command '@' (AT) which displays contextual information about the party
  (or current character)'s location, etc.

sglasby and gmcnutt:

o [both]
  Weapons and armor and such are now defined with more information, on
  topics such as their attack/defense values, damage and armor value
  ranges.  The basic combat rule is 
      attack  = 2d6 roll + attack value
      defense = 2d6 roll + defense value
  attack is matched with defense, attack >= defense results in a hit.

  Damage is expressed as a value 1dX+Y and an Armor Points value
  (which is the sum of 1dX+Y for each armor piece) is subtracted from
  damage done.

  Likewise, Hit Points are calculated via values per- species, class,
  and individual being.

  The balance/playability of the current numbers is conjectural, and
  the game system framework will have more added to it in future.

gmcnutt:

o [both] The damage and armor fields of ARMS are now a range of integers. This
  simulates a single dice with a modifier (1dX+Y).

o [engine] Added EFFECT_RESTORE to support mana restoration potions. Had to
  sacrifice EFFECT_NATURAL because the effects bitmask is out of bits. Turns
  out bit 31 does not work right because of an issue with atoi interpreting it
  as an overflow. This will be addressed in the 0.3.x line with the new effects
  system.

o [engine] When you declare a container on a map you now must provide a list of
  contents. For example:

  t_chest 10 10 { }  // an empty chest
  t_barrel 5 10 { t_sword 5 t_arrow 50 } // a barrel with a sword and arrows

o [daghul] Added an enhanced conversation tree for NPC character Gen and put
  him in Green Tower. He can teach the player the rudiments of the goblin
  language.

o CHECK_ITEM takes a number and an operator. It compares the number of such
  items in the player's inventory against the given value. Sliwan's
  conversation updated to provide an example.

o Added a S)earch command which will reveal things on adjacent tiles that are
  normally only visible with a Reveal spell

o Reformatted the in-game users guide for better readability and use of screen
  space

o Added a quantity field for placed items. The arrows, bolts and rocks in the
  terrain test map provide a sample usage.

o The blit_map api call now works on places besides the one the mech is located
  in. Previously it took a place parm but ignored it, defaulting to the current
  place. Now it works as originally intended.

o The CONNECT construct can now be used outside of the object {} block of a
  PLACE definition, allowing mechs in different places to be more easily wired
  together.

o Mostly for demonstration purposes I added two levers in the middle of Green
  Tower. One lever activates a portcullis in Green Tower Lower (the
  underground, a different place) by means of the new global CONNECT
  construct. The other lever activates a drawbridge in Green Tower Lower by
  means of the newly corrected 'place' parm of blit map.

o Added a mandrake patch to the wilderness. This required a fair amount of new,
  special-case engine support, which annoys me: a MECH_FULL_MOON signal is
  supported by the engine and delivered to every mech in the game whenever
  either moon hits phase 0 (which the engine assumes to be full... see what I
  mean? warty).

o Added the create_object api call for mech and conversations scriptlets. This
  creates a simple object like an armament or item.

o Added the create_npc_party api call for mech and conversation scriplets. This
  creates npc parties and adds them to the specified place (haven't tested
  creating them in other places, but the support is all there). Works in combat
  (dungeon rooms), too.

o Added a new engine-supported mech signal: MECH_TURN, which is delivered every
  turn to every mechanism within the player's current place.

o Added some new mechanism macros in the examples to test the new create_object
  and create_npc_party constructs. See the wilderness, the slime cave and Green
  Tower for example usage.

o Added a ^z for map editing. This toggles map zooming.

o Created a simple inn where the player can check out a room to sleep
  in. Haven't perfected the logic behind locking the player back out when he's
  done, or kicking him out if he sleeps too long, etc. I wanted to do this
  completely with mechs, and I think it can be done (except for the kicking out
  of bed part). Maybe Sam can figure out a nice way to do inns, it seems like
  his kind of puzzle.

o Npc parties now wake up the player if he is sleeping in their bed. They don't
  throw him out like they do in u5, but they will keep waking the player up
  until he moves and let's them get into bed.

o When npc parties are asleep they show a different sprite (if any species in
  the party has a 'sleep_sprite' specified)

o The player can now sleep in beds when in town. Added a bed object.

o Added slimes. Hacked in a cloning effect to make them work, and added an
  immunities field to species to make them immune to poison. I actually had
  about 50% of a new effects system implemented when I gave up because of all
  the boring parsing code boilerplate, and it was going into overtime
  tonight. I saved my protoype header file for the effects system in the
  GHULSCRIPT documentation. Cloning is not really the ideal effect to start
  with anyway.

o Bugfix: field effects never worked outside of combat. Added support for
  them. Also modified the main game loop so that the player cannot give
  commands until somebody in the party is not asleep. If everyone is sleeping
  then the player has to wait until at least one party member wakes up.

o Bugfix: chests created via the load file (as opposed to chests created as
  corpse loot) were causing a seg fault when the player tried to open them. The
  problem is that they were being created as generic Objects, and not as
  specific Container Objects, so they didn't really support the open command. I
  don't plan on making a good solution for this until the 0.3.x series, but for
  now I added a hack to make it work and keep Sam happy :-)

o Bugfix: cursor was being shaded according to lighting conditions, but it
  should always be bright and clearly visible. I fixed this by changing the way
  the cursor is rendered so that now it is simply accepted as a special
  case. This allowed me to remove one or two unsightly hacks in the process.

o Bugfix: if you zoomed in while sailing the vehicle map was oriented
  wrong. This was because zoom-in is handled by combat and combat always
  rotated the vehicle maps so that ships were broadside to one another. I fixed
  this by adding a check to see if an opponent was specified and, if not, then
  I don't rotate for broadside. This is still something of a hack because not
  all vehicles will require a broadside in combat, so this behaviour assumes a
  ship vehicle. We could add a flag to the vehicle definition which species
  wether or not to do this, but currently nothing would take advantage of it
  and by the time we create something that does we might think of a better way
  to solve the problem.


Changes 2003/06/25
sglasby:
-- Implemented a terrain- and palette-saving command (^S)ave Map.

   The command is bound to CONTROL-S, and writes the current 
   terrain_palette and terrain_map to disk as:
       /tmp/nazghul.pal.pal_tag_name.PID.ghul
       /tmp/nazghul.map.map_tag_name.PID.ghul

   This is useful for map editors in conjunction with (^T)erraform.
   The saved palettes and maps can easily be used in hand-written 
   GhulScript with minimal to no hand-editing of the Nazghul-generated 
   palettes/maps.

   The next step is a command to teleport to a tag-named place, 
   and a command to create a new place of specified width and height.
   With these commands, map creation can be done entirely within Nazghul.
   (Place creation will of course await full game state saving.)

Changes 2003/06/25
sglasby:
-- Implemented a terrain-editing command (^T)erraform.

   The command is bound to CONTROL-T, and invokes a UI cursoring mode
   in which PageUp/PageDown cycle through terrain to draw with (in the
   current terrain_palette) and (SPACE | ENTER | RETURN) alters terrain.

   The next step is more UI refinements, and a command which saves the
   current map and palette.

   Lots went on under the hood with the terrain, terrain_map, and 
   terrain_palette structs, with event handling in event.[ch],
   and in GhulScript in game.c to make this possible.
   Most of that won't be visible to end-users, and only a little 
   to GhulScript hackers.

   Among the stuff visible to GhulScript hackers:
   o New top-level keyword PALETTE which defines a terrain palette
     as a tagged entity
   o MAP now wants a field 'palette palette_tag_here;' rather than
     a palette {} block
   o types/terrain/terrains.ghul now defines a few PALETTEs, 
     rather than #define-ing palette {} blocks


Changes 2003/06/19
sglasby:

--Finished converting game_load_ascii_terrain_map() to use
  string-oriented terrain {} block parsing rather than
  Loader::getRaw().

  Now, both compact one_char_per_tile maps and single/multi-byte
  palette non-compact maps work alike.  That is, each line is a quoted
  string like "line".

--Added a map-printing function terrain_map_print() which can output
  GhulScript for a MAP.  Work remains to be done, including making
  sure that every terrain_map has its' palette field properly filled
  out, and connecting the palette_print() function.  (Or better yet,
  making palettes globally-scoped entities rather than per-map.)


Changes between nazghul-0.1.1 and nazghul-0.1.2

gmcnutt:

--Fixed the bug Sam reported about firing cannons in town. Whenever the cannon
  was fired the turns were updates as if the party was in the wilderness, not
  town. So about 64 turns passed, and if any hostiles happened to be nearby you
  would immediately enter combat. Also spruced up the messages shown when
  firing and fixed the cannonball sprite (finally :-)) in the examples.

--Fixed bugs related to playing a sound when damage is inflicted. Previously it
  was a hardcoded hack that broke a while back when we split the data files
  into their own directory. The fix was to add an optional 'damage_sound' field
  to both the SPECIES and CHAR declarations. When a character receives damage
  it will first check if it has its own special damage sound to play, otherwise
  it will check if its species has a damage sound to play, otherwise it doesn't
  play anything. This works in the case of damaging npc parties, too (for
  example with ship cannons) because npc party damage calls the character
  damage routines. In the examples I modified all species to play the old
  traditional damage sound.

--Added sound attenuation with distance (hearing the nixies splash around gets
  really annoying when you can't get away from it - need to find some better
  sounds). I only made it apply in party mode because in combat mode it's a bit
  trickier for the code that's playing the sound to figure out which party
  member it needs to calculate the distance from. Since dungeons are not party
  mode I'll probably want to reconsider how to do that.

--Added a COMBAT section to the script. Currently this is only used to declare
  the sound files used in combat for events like entry, defeat and victory.

--Fixed a bug introduced when I fixed cannons firing in town. The npc code was
  not properly incrementing turns when it fired cannons.

--When npc vehicle weapons hit an npc party it was printing "You hit ", as if
  the player was doing the firing. Changed the message from "you" to whatever
  the name of the weapon being fired.

--Fixed a crash that occurred on startup if the --sound 0 option was
  specified.

--Fixed a memory leak. NpcParty objects were not being deleted after combat
  except in the case where the NpcParty initiated combat. Added a new flag to
  the NpcParty class: 'destroy_on_combat_exit'. By default it is true. In the
  case where the NpcParty initiates combat it sets it to false before entering
  combat. After combat the NpcParty will be deleted once it returns to the code
  in place.c which updates objects every turn.

--Added a campsite map, campsite formation and party formation to the examples
  file. Increased the light from a fireplace, too.

--Added a new function in map: mapTileIsVisible checks if a tile is visible
  under the LOS rules.

--Added start of a new town: Green Tower

--Added the (a)ttack command for towns and wilderness. If the target is
  non-hostile it prompts the player for confirmation.

--If the player attacks a non-hostile npc party then the target's alignment
  bits are cleared from the player's alignment bits. In other words, the npc
  party and all of its allies are now the player's enemies. If you attack a
  townsperson all the other townspeople and the guards will attack you if they
  can. Note that they still aren't smart enough to pathfind through impassable
  mechanisms, so a door is enough to hold them off.

--Fixed some issues with sunrise/sunset. The sun now begins to appear in the
  sky window at sunrise, and is completely gone by sunset. The light fades in
  and out over the space of the first hour after sunrise and before sunset,
  respectively. The code to calculate sunlight now uses a single consistent
  forumula, and does so for the moons as well as the sun (more on that below).

--The moons now provide light depending on their arc and phase. They can
  provide at most 128 light units, whereas the sun can provide 255 (max is 255
  due to the way the lightmap gets built in map.c). So even with a full moon
  things are a bit dim.

--Replaced the u4 moon sprites with my own, since mine are 16x16 and u4 is
  only 8x16. Makes the full moons look full.

--The final contents of the cmdwin are now shown on the main console.

--New feature in the console. If a message is a repeat of the last one then
  instead of printing it again the console will print a notice of how many time
  the message has repeated so far. Also changed the way "slow progress" and
  friends are reported so that it takes advantage of this feature.

--Added a new character to Green Tower. Shroom the Hag owns the reagent shop.

--Added a druid class to the example.

--Npc parties in wander mode no longer walk over hazardous terrain. I was
  getting concerned about Shroom walking around in the firepit at the White
  Stag Lodge. :-)

--Bugfix: combat resulting from a conversation was not placing the opponent on
  the combat map. This broke when I made towns function in party mode like the
  wildernesses. Before that change combat just occurred in town so I didn't
  need to setup the npc party in the combat map.

--Bugfix: circular mech activation now has some crude (over)
  protection. Connecting two lights spaceship-style no longer causes the engine
  to crash on stack overflow.

--Added support for the sleep effect to items (previously only spells).

--Party leader is now reevaluated every time some part of the code asks about
  it (I use to try to cache the leader, but this makes things too
  complicated). Also, if the leader falls asleep the next in command takes
  over.

--Fixed sleep fields in combat. Looks they were never processed
  correctly.

--Removed the 'find party' and 'find edge' requirements in combat
  placement. Not sure if this will break something or not, but I decided to do
  this when I found that nixies could not get distributed on a bridge combat
  map. That's just silly, and most of that placement code was written back in
  the day when I wanted the engine to do more ass-covering for map hackers. So
  I removed it. We'll see what happens.

--Fixed the "In Lor" spell by making the caster the default spell
  target. Apparently I commented that line of code out for some reason but I
  don't know why. Should have left a note. This time, I did.

--Bugfix: the character describe method assumed the character had an
  occupation. Some npc characters in the example game don't have an
  occupation. For example, insects in a swarm.

--Bugfix: charmed opponents continued to attack the party. This was a bug
  introduced some time ago when I had characters remember their previous
  targets so that stepping out of LOS would not make them start to wander
  aimlessly. We needed to check if we were still hostile to these remembered
  targets.

--Bugfix: npcs standing on los-blocking terrain in combat no longer blind

--Bugfix: wave sprites now rendered properly when peering (zoomed out by a
  factor of two). There were several bugs contributing to this.

--Added a level beneath Green Tower (to test some spells, but I think I'll keep
  it).

--Added support for the sleep effect to items (previously only spells).

--Party leader is now reevaluated every time some part of the code asks about
  it (I use to try to cache the leader, but this makes things too
  complicated). Also, if the leader falls asleep the next in command takes
  over.

--Fixed sleep fields in combat. Looks they were never processed
  correctly.

--Removed the 'find party' and 'find edge' requirements in combat
  placement. Not sure if this will break something or not, but I decided to do
  this when I found that nixies could not get distributed on a bridge combat
  map. That's just silly, and most of that placement code was written back in
  the day when I wanted the engine to do more ass-covering for map hackers. So
  I removed it. We'll see what happens.

--Fixed the "In Lor" spell by making the caster the default spell
  target. Apparently I commented that line of code out for some reason but I
  don't know why. Should have left a note. This time, I did.

--Bugfix: the character describe method assumed the character had an
  occupation. Some npc characters in the example game don't have an
  occupation. For example, insects in a swarm.

--Bugfix: charmed opponents continued to attack the party. This was a bug
  introduced some time ago when I had characters remember their previous
  targets so that stepping out of LOS would not make them start to wander
  aimlessly. We needed to check if we were still hostile to these remembered
  targets.

--Bugfix: npcs standing on los-blocking terrain in combat no longer blind

--Bugfix: wave sprites now rendered properly when peering (zoomed out by a
  factor of two). There were several bugs contributing to this.

--Added a level beneath Green Tower (to test some spells, but I think I'll keep
  it).

--Fixed map-wrapping bug in vehicle weapon firing.

--Removed derived objects examples/mapfile and examples/data/mapfile from CVS.

--Added support for the sleep effect to items (previously only spells).

--Party leader is now reevaluated every time some part of the code asks about
  it (I use to try to cache the leader, but this makes things too
  complicated). Also, if the leader falls asleep the next in command takes
  over.

--Fixed sleep fields in combat. Looks they were never processed
  correctly.

--Removed the 'find party' and 'find edge' requirements in combat
  placement. Not sure if this will break something or not, but I decided to do
  this when I found that nixies could not get distributed on a bridge combat
  map. That's just silly, and most of that placement code was written back in
  the day when I wanted the engine to do more ass-covering for map hackers. So
  I removed it. We'll see what happens.

--Fixed the "In Lor" spell by making the caster the default spell
  target. Apparently I commented that line of code out for some reason but I
  don't know why. Should have left a note. This time, I did.

--Bugfix: the character describe method assumed the character had an
  occupation. Some npc characters in the example game don't have an
  occupation. For example, insects in a swarm.

--Bugfix: charmed opponents continued to attack the party. This was a bug
  introduced some time ago when I had characters remember their previous
  targets so that stepping out of LOS would not make them start to wander
  aimlessly. We needed to check if we were still hostile to these remembered
  targets.

--Bugfix: npcs standing on los-blocking terrain in combat no longer blind

--Bugfix: wave sprites now rendered properly when peering (zoomed out by a
  factor of two). There were several bugs contributing to this.

--Added a level beneath Green Tower (to test some spells, but I think I'll keep
  it).

--Fixed map-wrapping bug in vehicle weapon firing.

--Removed derived objects examples/mapfile and examples/data/mapfile from CVS.

--Bugfix: x)amine los-checking did not work across map boundaries.

sglasby:

--Rearranged terrain and terrain palette stuff in examples/ Everything
   pertaining to terrain has generally been polished, etc.  Added the
   STD_EXPANDED_PALETTE which uses the 32x32 Runic signs, and fixed up all the
   supporting GhulScript so everything fit together.  Worked towards a better
   ship map, with a couple of caveats (Ship Map bugs)

--Extended how terrain palettes work, which should be invisible to end-users
  and to GhulScript hackers alike.  Obsoleted 'glyph' in terrain definitions,
  only GhulScript hackers who fiddled with the TERRAIN macro would have
  noticed.

