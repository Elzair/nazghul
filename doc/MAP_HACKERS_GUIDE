                     MAP HACKER'S GUIDE TO NAZGHUL/HAXIMA


                        "The map is not the territory."
                         --Attributed to Alfred Korzybski


                                 INTRODUCTION

So you want to modify Haxima, or maybe you think Haxima sucks and you know you
can do better? Then you've come to the right place. The Haxima scripts will
give you lots of examples on how to do things. If you can figure them
out. You're a smart guy. I'm sure you can. But even smart guys sometimes need a
hint, and that's what this manual is for. Here you'll find a discussion of the
principles of how to build a game with nazghul, including details on the kernel
API. 

Or, you will when it's finished.


                                   CONCEPTS

COMPOSITE SPRITE
        First, see SPRITE. A composite sprite is a sprite made up of layers of
        other sprites.

GOB     Scheme data associated with a kernel data structure. The kernel never
        accesses this data, it is meant to be used by scripts to customize or
        augment these data structures. Objects, object types and astral bodies
        all optionally have gobs.

OBJECT  Something which exists on the map and is not part of the scenery.

OBJECT TYPE
        Read-only data associated with and shared by a class of objects. A type
        is a kernel data structure which describes attributes that are common
        to an entire class of objects. For example, all short swords have the
        same sprite and basic attributes, and all sword objects refer to the
        sword object type to provide these attributes. In fact, simple objects
        like short swords may be implemented in the kernel as little more than
        an object type and a location.

        There are several classes of object type: a generic base class, an arms
        type, a vehicle type, and a field type. Every object type class has a
        fixed set of attributes. These can be extended by the script, however,
        by attaching a gob to the object type.

SPRITE  An animation sequence which shows an object. Every visible object has a
        sprite. Sprites can be composed of other sprites, see COMPOSITE SPRITE.

SPRITE SET
        Usually sprite images are collected into files with lots of images in
        them. A sprite set refers to the file and stores information like
        how big the images are, how many are in the file, etc. Sprites refer to
        sprite sets. Different sprites can share some of the same images,
        although few ever do.

TAG     A name given to a kernel data structure so that it can be referred to
        by a scheme variable. Tags are important because they can be used when
        saving a game to allow objects to refer to one another when the game is
        reloaded.

                                  KERNEL API

This section documents the kernel calls available to scripts. The document
format is moduled after the UNIX man pages, which, like so many things in UNIX,
have served well enough over the last 30-odd years to be worth emulating.

----------------------------------------------------------------------------
NAME
        kern-sprite-apply-matrix - apply a color conversion matrix to a sprite

SYNOPSIS
        (kern-sprite-apply-matrix <sprite> <matrix>)

DESCRIPTION
        The purpose of this is to alter the colors of a sprite. The idea is you
        create one sprite, probably in grayscale, and use this procedure to
        make different colored variations of it. This works by applying the
        matrix to the sprite, resulting in a linear remapping of the sprite
        colors to another set of colors. The matrix is in the form:

                (list (list <c01> <c02> <c03>)
                      (list <c11> <c12> <c13>)
                      (list <c21> <c22> <c23>)
                      (list <k1> <k2> <k3>))

        This matrix is applied to the red, green and blue components of each
        pixel in the sprite like this:

                r = R * c00 + G * c01 + B * c02 + k1
                g = R * c10 + G * c11 + B * c12 + k2
                b = R * c20 + G * c21 + B * c22 + k3
                 
        Where r, g and b are the result and R, G and B are the original values
        for the pixel. The result for a component will be clamped to [0, 255].

        The underlying image is copied before being modified. This means that
        if the sprite is a clone of another sprite, the other sprite will not
        be modified.

RETURNS
        The modified sprite. If something is wrong with the arguments it
        returns the original, unmodified sprite.

EXAMPLES

        This applies an identity matrix, which does nothing:

                (kern-sprite-apply-matrix ksprite
                                          '((1 0 0)
                                            (0 1 0)
                                            (0 0 1)
                                            (0 0 0)))

        This matrix will convert a grayscale image to blue:

                0 0 0
                0 0 0
                0 0 1
                0 0 0

        This will swap red and blue:

                0 0 1
                0 1 0
                1 0 0
                0 0 0

        This will lighten every pixel by a fixed offset:
        
                1   0  0
                0   1  0
                0   0  1
                64 64 64

         This will darken every pixel by a scale factor:

                0.5 0   0
                0   0.5 0
                0   0   0.5
                0   0   0

----------------------------------------------------------------------------
NAME
        kern-sprite-clone - copy a sprite

SYNOPSIS
        (kern-sprite-clone <original> <new-tag>)

DESCRIPTION
        Use this when you want to make a modified version of a sprite but still
        want to keep the original intact. You can assign the clone its own tag
        and henceforth refer to the tag as a scheme variable, or you can pass
        in nil and just use the return value.

RETURNS
        The cloned sprite, or nil if 'original' was a bad arg or a memory
        allocation failure prevented creation of the clone.

EXAMPLES
        ;; Clone grass and turn it brown to make dirt
        (kern-sprite-clone s_grass 's_dirt)
        (kern-sprite-apply-matrix s_dirt green-to-brown-matrix)

----------------------------------------------------------------------------
NAME
        kern-type-set/get-gob - associate scheme data with an object type

SYNOPSIS
        (kern-type-set-gob <ktype> <cell>)
        (kern-type-get-gob <ktype>)

DESCRIPTION

        kern-type-set-gob associates 'cell' with the object type 'ktype', so
        that it can later be found by scripts via kern-type-get-gob. 'ktype'
        must be the result of a call to kern-mk-obj-type.

        The purpose is to add game-specific information to a kernel data
        structure so that closures called from the kernel can find it. This
        information is not visible to the kernel.

        Unlike the gobs attached to objects, gobs attached to object types are
        not written to the save-game file. For that matter, object types are
        not written, either, and must be reloaded for every game.
